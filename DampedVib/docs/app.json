[{"name": "app.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib import gridspec\nimport matplotlib.animation as animation\n\nfrom shiny import App, render, ui\nfrom faicons import icon_svg\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_numeric(\"damp_rat\", \"Damping Ratio (%)\", 5.0, min=0.0, max=100.0),\n            ui.input_numeric(\"w\", \"Frequency (rad/s)\", 10.0),\n            ui.input_numeric(\"q0\", \"Initial Displacement (m)\", 0.01),\n            ui.input_numeric(\"q0dot\", \"Initial Velocity (m/s)\", 0.0),\n            \n        ),\n        ui.panel_main(\n            ui.output_plot(\"p\"),\n        ),\n    ),\n    ui.div(\n        ui.input_action_button(\n            \"run\", \"Run simulation\", icon=icon_svg(\"play\"), class_=\"btn-primary\"\n        )\n    ),\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def p():\n        w=input.w()\n        damp_rat=input.damp_rat()\n        q0=input.q0()\n        q0dot=input.q0dot()\n\n        fig = plt.figure(figsize=(6, 4))\n        gs = gridspec.GridSpec(1, 1)\n        ax = plt.subplot(gs[0])\n\n        ax.set_xlim(-0, 10)\n        ax.set_xlabel(r'$\\tau$')\n        ax.set_ylabel('q(t)')\n\n        if input.run() > 0:\n            damp_rat = float(damp_rat/100.0)\n            damped_freq = w*np.sqrt(1-damp_rat**2) #damped frequency, in rad/sec\n\n            cycle = 10.0 #normalized time\n            # tao = np.arange(0,cycle + 0.01,0.01) #normalized time\n            tao = np.arange(0.0, cycle + 0.02,0.02) #normalized time\n\n            cons = damp_rat / np.sqrt(1-(damp_rat)**2)\n\n            Resp = np.zeros(len(tao))\n            zero_line = np.zeros(len(tao))\n            count = 0\n            amplitude=float((np.sqrt(q0**2 + (2*damp_rat*q0*q0dot/w)+(q0dot/w)**2)) / np.sqrt(1-(damp_rat)**2))\n            upper_boundary = np.zeros(len(tao))\n            lower_boundary = np.zeros(len(tao))\n            for i in tao:\n                Resp[count] = (np.exp(-cons * 2*np.pi * i)* (q0*np.cos(2*np.pi * i)+ ((q0dot + damp_rat * w * q0) / damped_freq) * np.sin(2*np.pi * i)))\n                upper_boundary[count]=amplitude * np.exp(-damp_rat*2*np.pi*i/np.sqrt(1-damp_rat**2))\n                lower_boundary[count]=-amplitude * np.exp(-damp_rat*2*np.pi*i/np.sqrt(1-damp_rat**2))\n                count += 1\n\n            ax.plot(tao, zero_line, linewidth=0.5, color='black')\n            ax.plot(tao, lower_boundary, '--', color='black')\n            ax.plot(tao, upper_boundary, '--', color='black')\n            resgraph, = ax.plot([], [], color='crimson')\n\n            def response(i):\n                resgraph.set_data(tao[0:i], Resp[0:i])\n                # dot.set_data(tao[i], Resp[i])\n                # return resgraph, dot,\n                return resgraph,\n    \n            anim = animation.FuncAnimation(fig, response, frames=len(tao), interval=20, blit=True)\n\n            return anim\n        \n        else:\n            return fig\n\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def p():\n        w=input.w()\n        damp_rat=input.damp_rat()\n        q0=input.q0()\n        q0dot=input.q0dot()\n\n        fig = plt.figure(figsize=(6, 4))\n        gs = gridspec.GridSpec(1, 1)\n        ax = plt.subplot(gs[0])\n\n        ax.set_xlim(-0, 10)\n        ax.set_xlabel(r'$\\tau$')\n        ax.set_ylabel('q(t)')\n\n        if input.run() > 0:\n            damp_rat = float(damp_rat/100.0)\n            damped_freq = w*np.sqrt(1-damp_rat**2) #damped frequency, in rad/sec\n\n            cycle = 10.0 #normalized time\n            # tao = np.arange(0,cycle + 0.01,0.01) #normalized time\n            tao = np.arange(0.0, cycle + 0.02,0.02) #normalized time\n\n            cons = damp_rat / np.sqrt(1-(damp_rat)**2)\n\n            Resp = np.zeros(len(tao))\n            zero_line = np.zeros(len(tao))\n            count = 0\n            amplitude=float((np.sqrt(q0**2 + (2*damp_rat*q0*q0dot/w)+(q0dot/w)**2)) / np.sqrt(1-(damp_rat)**2))\n            upper_boundary = np.zeros(len(tao))\n            lower_boundary = np.zeros(len(tao))\n            for i in tao:\n                Resp[count] = (np.exp(-cons * 2*np.pi * i)* (q0*np.cos(2*np.pi * i)+ ((q0dot + damp_rat * w * q0) / damped_freq) * np.sin(2*np.pi * i)))\n                upper_boundary[count]=amplitude * np.exp(-damp_rat*2*np.pi*i/np.sqrt(1-damp_rat**2))\n                lower_boundary[count]=-amplitude * np.exp(-damp_rat*2*np.pi*i/np.sqrt(1-damp_rat**2))\n                count += 1\n\n            ax.plot(tao, zero_line, linewidth=0.5, color='black')\n            ax.plot(tao, lower_boundary, '--', color='black')\n            ax.plot(tao, upper_boundary, '--', color='black')\n            ax.plot(tao, Resp, linewidth=1.0, color='crimson')\n\n        return fig\n\napp = App(app_ui, server)\n\n\n# def server(input, output, session):\n#     @output\n#     @render.plot\n#     def p():\n#         w=input.w()\n#         damp_rat=input.damp_rat()\n#         q0=input.q0()\n#         q0dot=input.q0dot()\n\n#         fig = plt.figure(figsize=(6, 4))\n#         gs = gridspec.GridSpec(1, 1)\n#         ax = plt.subplot(gs[0])\n\n#         ax.set_xlim(-0, 10)\n#         ax.set_xlabel(r'$\\tau$')\n#         ax.set_ylabel('q(t)')\n\n#         if input.run() > 0:\n#             damp_rat = float(damp_rat/100.0)\n#             damped_freq = w*np.sqrt(1-damp_rat**2) #damped frequency, in rad/sec\n\n#             cycle = 10.0 #normalized time\n#             # tao = np.arange(0,cycle + 0.01,0.01) #normalized time\n#             tao = np.arange(0.0, cycle + 0.02,0.02) #normalized time\n\n#             cons = damp_rat / np.sqrt(1-(damp_rat)**2)\n\n#             Resp = np.zeros(len(tao))\n#             zero_line = np.zeros(len(tao))\n#             count = 0\n#             amplitude=float((np.sqrt(q0**2 + (2*damp_rat*q0*q0dot/w)+(q0dot/w)**2)) / np.sqrt(1-(damp_rat)**2))\n#             upper_boundary = np.zeros(len(tao))\n#             lower_boundary = np.zeros(len(tao))\n#             for i in tao:\n#                 Resp[count] = (np.exp(-cons * 2*np.pi * i)* (q0*np.cos(2*np.pi * i)+ ((q0dot + damp_rat * w * q0) / damped_freq) * np.sin(2*np.pi * i)))\n#                 upper_boundary[count]=amplitude * np.exp(-damp_rat*2*np.pi*i/np.sqrt(1-damp_rat**2))\n#                 lower_boundary[count]=-amplitude * np.exp(-damp_rat*2*np.pi*i/np.sqrt(1-damp_rat**2))\n#                 count += 1\n\n#             for i in np.arange(len(tao))[::5]:\n\n#                 ax.clear()\n#                 plt.xlabel(r'$\\tau$')\n#                 plt.ylabel('q(t)')\n\n#                 plt.plot(tao[0:i], Resp[0:i], color='crimson')\n#                 plt.plot(tao, zero_line, linewidth=0.5, color='black')\n#                 plt.plot(tao, lower_boundary, '--', color='black')\n#                 plt.plot(tao, upper_boundary, '--', color='black')\n#                 plt.pause(0.0001)\n\n#         return fig\n\n# app = App(app_ui, server)\n", "type": "text"}]